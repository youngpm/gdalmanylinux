# An image for building manylinux1 wheels equivalent to those that
# https://github.com/sgillies/frs-wheel-builds makes for macosx.
#
# TODO: Figure out how to make the builds for osx!
#
# Note well: a very limited set of format drivers are included in these
# wheels. See the GDAL configuration below for details.

FROM quay.io/pypa/manylinux2014_x86_64

RUN yum update -y && yum install -y curl libcurl-devel json-c-devel zlib-devel libtiff-devel postgresql-devel

# Install openssl
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O https://www.openssl.org/source/openssl-1.1.1q.tar.gz \
    && echo "d7939ce614029cdff0b6c20f0e2e5703158a489a72b2507b8bd51bf8c8fd10ca  openssl-1.1.1q.tar.gz" > checksum \
    && sha256sum -c checksum \
    && tar zxf openssl-1.1.1q.tar.gz \
    && cd /src/openssl-1.1.1q \
    && ./config no-shared no-ssl2 no-async -fPIC -O2 --prefix=/usr/local/ssl --openssldir=/usr/local/ssl \
    && make -j 4 \
    && make install \
    && rm -rf /src

# Install geos
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O http://download.osgeo.org/geos/geos-3.11.0.tar.bz2 \
    && tar jxf geos-3.11.0.tar.bz2 \
    && cd /src/geos-3.11.0 \
    && CFLAGS="-O2 -Wl,-S" CXXFLAGS="-O2 -Wl,-S" ./configure \
    && make -j 4 \
    && make install \
    && rm -rf /src

# Install jasper
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O http://download.osgeo.org/gdal/jasper-1.900.1.uuid.tar.gz \
    && tar xzf jasper-1.900.1.uuid.tar.gz \
    && cd /src/jasper-1.900.1.uuid \
    && ./configure --disable-debug --enable-shared \
    && make -j 4 \
    && make install \
    && rm -rf /src

# proj4
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O http://download.osgeo.org/proj/proj-9.0.1.tar.gz \
    && tar xzf proj-9.0.1.tar.gz \
    && cd /src/proj-9.0.1 \
    && mkdir build \
    && cd build \
    && cmake .. \
    && cmake --build . \
    && cmake --install . \
    && rm -rf /src

# openjpeg
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O https://github.com/uclouvain/openjpeg/archive/v2.4.0.tar.gz \
    && tar xzf v2.4.0.tar.gz \
    && cd /src/openjpeg-2.4.0 \
    && mkdir -p build \
    && cd build \
    && cmake .. -DBUILD_THIRDPARTY:BOOL=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local \
    && make -j 4 install \
    && make clean \
    && rm -rf /src

# hdf5
RUN cd /usr/local/src \
    && curl -f -L -O https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.1/src/hdf5-1.12.1.tar.gz \
    && tar xzf hdf5-1.12.1.tar.gz \
    && cd hdf5-1.12.1 \
    && ./configure --prefix=/usr/local --enable-shared --enable-build-mode=production CFLAGS="-O2 -Wl,-S" \
    && make -j 4 \
    && make install

## netcdf
RUN cd /usr/local/src \
    && curl -f -L -O https://github.com/Unidata/netcdf-c/archive/refs/tags/v4.8.1.tar.gz \
    && tar xzf v4.8.1.tar.gz \
    && cd netcdf-c-4.8.1 \
    && mkdir build \
    && cd build \
    && cmake .. \
    && cmake --build . \
    && cmake â€“-install .

## expat
RUN cd /usr/local/src \
    && curl -f -L -O https://github.com/libexpat/libexpat/releases/download/R_2_2_10/expat-2.2.10.tar.bz2 \
    && tar xjf expat-2.2.10.tar.bz2 \
    && cd expat-2.2.10 \
    && CFLAGS="-O2 -Wl,-S" ./configure --prefix=/usr/local \
    && make -j 4 \
    && make install

## webp
RUN cd /usr/local/src \
    && curl -f -L -O https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.0.tar.gz \
    && tar xzf libwebp-1.2.0.tar.gz \
    && cd libwebp-1.2.0 \
    && CFLAGS="-O2 -Wl,-S" ./configure --prefix=/usr/local \
    && make -j 4 \
    && make install

# gdal
RUN mkdir -p /src \
    && cd /src \
    && curl -f -L -O http://download.osgeo.org/gdal/3.5.1/gdal-3.5.1.tar.gz \
    && tar xzf gdal-3.5.1.tar.gz \
    && cd /src/gdal-3.5.1 \
    && CFLAGS="-O2 -Wl,-S" CXXFLAGS="-O2 -Wl,-S" ./configure \
        PQ_CFLAGS="-I/usr/include" PQ_LIBS="-L/usr/lib64 -lpq" \
        --with-threads \
        --disable-debug \
        --disable-static \
        --without-grass \
        --without-libgrass \
        --without-jpeg12 \
        --with-libtiff \
        --with-jpeg \
        --with-pg \
        --with-gif \
        --with-png \
        --with-webp \
        --with-geotiff=internal \
        --with-sqlite3=/usr \
        --with-pcraster=internal \
        --with-pcidsk=internal \
        --with-bsb \
        --with-grib \
        --with-pam \
        --with-geos=/usr/local/bin/geos-config \
        --with-static-proj4=/usr/local \
        --with-expat=/usr/local \
        --with-libjson-c \
        --with-libiconv-prefix=/usr \
        --with-libz=/usr \
        --with-curl=/usr/local/bin/curl-config \
        --with-netcdf=/usr/local/netcdf \
        --with-openjpeg \
        --with-jasper=/usr/local \
        --with-hdf5=/usr/local \
        --without-python \
        --without-hdf4 \
    && make -j 12 \
    && make install

# Bake dev requirements into the Docker image for faster builds
ADD requirements.txt /tmp/requirements.txt
RUN for PYBIN in /opt/python/*/bin; do \
        $PYBIN/pip install -U pip || true; \
        $PYBIN/pip install setuptools==57.5.0 || true; \
        $PYBIN/pip install -r /tmp/requirements.txt || true; \
    done

# Replace SWIG's setup.py with this modified one, which gets numpy in
# there as a dependency.
ADD setup.py /src/gdal-3.5.1/swig/python/setup.py

# Replace the osgeo module __init__.py with this modified one, which
# sets the GDAL_DATA and PROJ_LIB variables on import to where they've
# been copied to.
ADD gdalinit.py /src/gdal-3.5.1/swig/python/osgeo/__init__.py

WORKDIR /io
CMD ["/io/build-linux-wheels.sh"]
